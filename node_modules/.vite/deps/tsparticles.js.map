{
  "version": 3,
  "sources": ["../../@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSizeLimit.js", "../../@tsparticles/plugin-absorbers/browser/Options/Classes/AbsorberSize.js", "../../@tsparticles/plugin-absorbers/browser/Options/Classes/Absorber.js", "../../@tsparticles/plugin-absorbers/browser/Enums/AbsorberClickMode.js", "../../@tsparticles/plugin-absorbers/browser/AbsorberInstance.js", "../../@tsparticles/plugin-absorbers/browser/Absorbers.js", "../../@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js", "../../@tsparticles/plugin-absorbers/browser/index.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js", "../../@tsparticles/updater-destroy/browser/Enums/DestroyMode.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/Split.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js", "../../@tsparticles/updater-destroy/browser/Utils.js", "../../@tsparticles/updater-destroy/browser/DestroyUpdater.js", "../../@tsparticles/updater-destroy/browser/index.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js", "../../@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js", "../../@tsparticles/plugin-emitters/browser/Enums/EmitterClickMode.js", "../../@tsparticles/plugin-emitters/browser/EmitterInstance.js", "../../@tsparticles/plugin-emitters/browser/Emitters.js", "../../@tsparticles/plugin-emitters/browser/EmittersPlugin.js", "../../@tsparticles/plugin-emitters/browser/ShapeManager.js", "../../@tsparticles/plugin-emitters/browser/EmitterShapeBase.js", "../../@tsparticles/plugin-emitters/browser/index.js", "../../@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js", "../../@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js", "../../@tsparticles/plugin-emitters-shape-circle/browser/index.js", "../../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js", "../../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js", "../../@tsparticles/plugin-emitters-shape-square/browser/index.js", "../../@tsparticles/interaction-external-trail/browser/Options/Classes/Trail.js", "../../@tsparticles/interaction-external-trail/browser/TrailMaker.js", "../../@tsparticles/interaction-external-trail/browser/index.js", "../../@tsparticles/updater-roll/browser/RollMode.js", "../../@tsparticles/updater-roll/browser/Utils.js", "../../@tsparticles/updater-roll/browser/Options/Classes/RollLight.js", "../../@tsparticles/updater-roll/browser/Options/Classes/Roll.js", "../../@tsparticles/updater-roll/browser/RollUpdater.js", "../../@tsparticles/updater-roll/browser/index.js", "../../@tsparticles/shape-text/browser/Utils.js", "../../@tsparticles/shape-text/browser/TextDrawer.js", "../../@tsparticles/shape-text/browser/index.js", "../../@tsparticles/updater-tilt/browser/TiltDirection.js", "../../@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js", "../../@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js", "../../@tsparticles/updater-tilt/browser/TiltUpdater.js", "../../@tsparticles/updater-tilt/browser/index.js", "../../@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js", "../../@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js", "../../@tsparticles/updater-twinkle/browser/TwinkleUpdater.js", "../../@tsparticles/updater-twinkle/browser/index.js", "../../@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js", "../../@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js", "../../@tsparticles/updater-wobble/browser/Utils.js", "../../@tsparticles/updater-wobble/browser/WobbleUpdater.js", "../../@tsparticles/updater-wobble/browser/index.js", "../../tsparticles/browser/index.js"],
  "sourcesContent": ["import { isNull } from \"@tsparticles/engine\";\nexport class AbsorberSizeLimit {\n    constructor() {\n        this.radius = 0;\n        this.mass = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mass !== undefined) {\n            this.mass = data.mass;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull, isNumber } from \"@tsparticles/engine\";\nimport { AbsorberSizeLimit } from \"./AbsorberSizeLimit.js\";\nexport class AbsorberSize extends ValueWithRandom {\n    constructor() {\n        super();\n        this.density = 5;\n        this.value = 50;\n        this.limit = new AbsorberSizeLimit();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.density !== undefined) {\n            this.density = data.density;\n        }\n        if (isNumber(data.limit)) {\n            this.limit.radius = data.limit;\n        }\n        else {\n            this.limit.load(data.limit);\n        }\n    }\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { AbsorberSize } from \"./AbsorberSize.js\";\nexport class Absorber {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#000000\";\n        this.draggable = false;\n        this.opacity = 1;\n        this.destroy = true;\n        this.orbits = false;\n        this.size = new AbsorberSize();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.draggable !== undefined) {\n            this.draggable = data.draggable;\n        }\n        this.name = data.name;\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.size !== undefined) {\n            this.size.load(data.size);\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n        if (data.orbits !== undefined) {\n            this.orbits = data.orbits;\n        }\n    }\n}\n", "export var AbsorberClickMode;\n(function (AbsorberClickMode) {\n    AbsorberClickMode[\"absorber\"] = \"absorber\";\n})(AbsorberClickMode || (AbsorberClickMode = {}));\n", "import { RotateDirection, Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, originPoint, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, engine, options, position) {\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this._container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this._container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise;\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === RotateDirection.clockwise ? Math.cos : Math.sin,\n                    y: orbitDirection === RotateDirection.clockwise ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this._absorbers = absorbers;\n        this._container = container;\n        this._engine = engine;\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this._engine, this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this._container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(originPoint.x, originPoint.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this._container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n", "import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { AbsorberInstance } from \"./AbsorberInstance.js\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find(t => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this._container, this._engine, options, position);\n        this.array.push(absorber);\n        return Promise.resolve(absorber);\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === AbsorberClickMode.absorber) {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this._container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this._container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this._container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nimport { AbsorberClickMode } from \"./Enums/AbsorberClickMode.js\";\nimport { Absorbers } from \"./Absorbers.js\";\nexport class AbsorbersPlugin {\n    constructor(engine) {\n        this.id = \"absorbers\";\n        this._engine = engine;\n    }\n    async getPlugin(container) {\n        return Promise.resolve(new Absorbers(container, this._engine));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, absorber => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(AbsorberClickMode.absorber, options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\n", "import { AbsorbersPlugin } from \"./AbsorbersPlugin.js\";\nexport async function loadAbsorbersPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addPlugin(new AbsorbersPlugin(engine), refresh);\n}\nexport * from \"./AbsorberContainer.js\";\nexport * from \"./Enums/AbsorberClickMode.js\";\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n", "export var DestroyMode;\n(function (DestroyMode) {\n    DestroyMode[\"none\"] = \"none\";\n    DestroyMode[\"split\"] = \"split\";\n})(DestroyMode || (DestroyMode = {}));\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n", "import { OptionsColor, deepExtend, executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { SplitFactor } from \"./SplitFactor.js\";\nimport { SplitRate } from \"./SplitRate.js\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, particles => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { DestroyBounds } from \"./DestroyBounds.js\";\nimport { DestroyMode } from \"../../Enums/DestroyMode.js\";\nimport { Split } from \"./Split.js\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = DestroyMode.none;\n        this.split = new Split();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n", "import { PixelMode, getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: PixelMode.precise,\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n", "import { getRangeValue, percentDenominator, } from \"@tsparticles/engine\";\nimport { Destroy } from \"./Options/Classes/Destroy.js\";\nimport { DestroyMode } from \"./Enums/DestroyMode.js\";\nimport { split } from \"./Utils.js\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / percentDenominator;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / percentDenominator;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / percentDenominator;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / percentDenominator;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === DestroyMode.split) {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n", "import { DestroyUpdater } from \"./DestroyUpdater.js\";\nexport async function loadDestroyUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"destroy\", container => {\n        return Promise.resolve(new DestroyUpdater(engine, container));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class EmitterShapeReplace {\n    constructor() {\n        this.color = false;\n        this.opacity = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { deepExtend, isNull } from \"@tsparticles/engine\";\nimport { EmitterShapeReplace } from \"./EmitterShapeReplace.js\";\nexport class EmitterShape {\n    constructor() {\n        this.options = {};\n        this.replace = new EmitterShapeReplace();\n        this.type = \"square\";\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options ?? {});\n        }\n        this.replace.load(data.replace);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n", "import { PixelMode, isNull } from \"@tsparticles/engine\";\nexport class EmitterSize {\n    constructor() {\n        this.mode = PixelMode.percent;\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { EmitterLife } from \"./EmitterLife.js\";\nimport { EmitterRate } from \"./EmitterRate.js\";\nimport { EmitterShape } from \"./EmitterShape.js\";\nimport { EmitterSize } from \"./EmitterSize.js\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = new EmitterShape();\n        this.startCount = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, particles => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        this.shape.load(data.shape);\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n", "export var EmitterClickMode;\n(function (EmitterClickMode) {\n    EmitterClickMode[\"emitter\"] = \"emitter\";\n})(EmitterClickMode || (EmitterClickMode = {}));\n", "import { PixelMode, Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this._engine, this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: PixelMode.precise,\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: PixelMode.percent,\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n", "import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterClickMode } from \"./Enums/EmitterClickMode.js\";\nimport { EmitterInstance } from \"./EmitterInstance.js\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find(t => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== EmitterClickMode.emitter) {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterClickMode } from \"./Enums/EmitterClickMode.js\";\nimport { Emitters } from \"./Emitters.js\";\nexport class EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return Promise.resolve(new Emitters(this._engine, container));\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, emitter => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map(s => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    const defaultCount = 1;\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map(s => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(EmitterClickMode.emitter, options.interactivity.events.onClick.mode)));\n    }\n}\n", "const shapeGeneratorss = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShapeGenerator(name, generator) {\n        if (!this.getShapeGenerator(name)) {\n            shapeGeneratorss.set(name, generator);\n        }\n    }\n    getShapeGenerator(name) {\n        return shapeGeneratorss.get(name);\n    }\n    getSupportedShapeGenerators() {\n        return shapeGeneratorss.keys();\n    }\n}\n", "export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n", "import { EmittersPlugin } from \"./EmittersPlugin.js\";\nimport { ShapeManager } from \"./ShapeManager.js\";\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n", "import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n", "import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n", "import { EmittersCircleShapeGenerator } from \"./EmittersCircleShapeGenerator.js\";\nexport async function loadEmittersShapeCircle(engine, refresh = true) {\n    const emittersEngine = engine;\n    emittersEngine.checkVersion(\"3.8.1\");\n    emittersEngine.addEmitterShapeGenerator?.(\"circle\", new EmittersCircleShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n", "import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { double, getRandom, half } from \"@tsparticles/engine\";\nconst sides = 4;\nvar Sides;\n(function (Sides) {\n    Sides[Sides[\"TopLeft\"] = 0] = \"TopLeft\";\n    Sides[Sides[\"TopRight\"] = 1] = \"TopRight\";\n    Sides[Sides[\"BottomRight\"] = 2] = \"BottomRight\";\n    Sides[Sides[\"BottomLeft\"] = 3] = \"BottomLeft\";\n})(Sides || (Sides = {}));\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - half);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - half) * double;\n            switch (side) {\n                case Sides.TopLeft:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case Sides.TopRight:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case Sides.BottomRight:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case Sides.BottomLeft:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n", "import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n", "import { EmittersSquareShapeGenerator } from \"./EmittersSquareShapeGenerator.js\";\nexport async function loadEmittersShapeSquare(engine, refresh = true) {\n    const emittersEngine = engine;\n    emittersEngine.checkVersion(\"3.8.1\");\n    emittersEngine.addEmitterShapeGenerator?.(\"square\", new EmittersSquareShapeGenerator());\n    await emittersEngine.refresh(refresh);\n}\n", "import { deepExtend, isNull, } from \"@tsparticles/engine\";\nexport class Trail {\n    constructor() {\n        this.delay = 1;\n        this.pauseOnStop = false;\n        this.quantity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = data.quantity;\n        }\n        if (data.particles !== undefined) {\n            this.particles = deepExtend({}, data.particles);\n        }\n        if (data.pauseOnStop !== undefined) {\n            this.pauseOnStop = data.pauseOnStop;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Trail } from \"./Options/Classes/Trail.js\";\nconst trailMode = \"trail\";\nexport class TrailMaker extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._delay = 0;\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(delta) {\n        const container = this.container, { interactivity } = container;\n        if (!container.retina.reduceFactor) {\n            return;\n        }\n        const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n        if (!trailOptions) {\n            return;\n        }\n        const optDelay = (trailOptions.delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        if (this._delay < optDelay) {\n            this._delay += delta.value;\n        }\n        if (this._delay < optDelay) {\n            return;\n        }\n        const canEmit = !(trailOptions.pauseOnStop &&\n            (interactivity.mouse.position === this._lastPosition ||\n                (interactivity.mouse.position?.x === this._lastPosition?.x &&\n                    interactivity.mouse.position?.y === this._lastPosition?.y)));\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos) {\n            this._lastPosition = { ...mousePos };\n        }\n        else {\n            delete this._lastPosition;\n        }\n        if (canEmit) {\n            container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n        }\n        this._delay -= optDelay;\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        return ((mouse.clicking && mouse.inside && !!mouse.position && isInArray(trailMode, events.onClick.mode)) ||\n            (mouse.inside && !!mouse.position && isInArray(trailMode, events.onHover.mode)));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.trail) {\n            options.trail = new Trail();\n        }\n        for (const source of sources) {\n            options.trail.load(source?.trail);\n        }\n    }\n    reset() {\n    }\n}\n", "import { TrailMaker } from \"./TrailMaker.js\";\nexport async function loadExternalTrailInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalTrail\", container => {\n        return Promise.resolve(new TrailMaker(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Trail.js\";\nexport * from \"./Options/Interfaces/ITrail.js\";\n", "export var RollMode;\n(function (RollMode) {\n    RollMode[\"both\"] = \"both\";\n    RollMode[\"horizontal\"] = \"horizontal\";\n    RollMode[\"vertical\"] = \"vertical\";\n})(RollMode || (RollMode = {}));\n", "import { AlterType, getRandom, getRangeValue, half, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { RollMode } from \"./RollMode.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport function initParticle(engine, particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === RollMode.horizontal || rollOpt.mode === RollMode.both,\n        vertical: rollOpt.mode === RollMode.vertical || rollOpt.mode === RollMode.both,\n        angle: getRandom() * doublePI,\n        speed: getRangeValue(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(engine, rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= half ? AlterType.darken : AlterType.enlighten;\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: AlterType.darken,\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: AlterType.enlighten,\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nimport { RollLight } from \"./RollLight.js\";\nimport { RollMode } from \"../../RollMode.js\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = RollMode.vertical;\n        this.speed = 25;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n", "import { initParticle, updateRoll } from \"./Utils.js\";\nimport { Roll } from \"./Options/Classes/Roll.js\";\nexport class RollUpdater {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(this._engine, particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n", "import { RollUpdater } from \"./RollUpdater.js\";\nexport async function loadRollUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"roll\", () => {\n        return Promise.resolve(new RollUpdater(engine));\n    }, refresh);\n}\n", "import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n", "import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport class TextDrawer {\n    constructor() {\n        this.validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\n    }\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map(t => options.particles.shape.options[t])\n                .find(t => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !this.validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n", "import { TextDrawer } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TextDrawer(), refresh);\n}\n", "export var TiltDirection;\n(function (TiltDirection) {\n    TiltDirection[\"clockwise\"] = \"clockwise\";\n    TiltDirection[\"counterClockwise\"] = \"counter-clockwise\";\n    TiltDirection[\"random\"] = \"random\";\n})(TiltDirection || (TiltDirection = {}));\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nimport { TiltDirection } from \"../../TiltDirection.js\";\nimport { TiltAnimation } from \"./TiltAnimation.js\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = TiltDirection.clockwise;\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { AnimationStatus, DestroyType, degToRad, getRandom, getRangeValue, half, updateAnimation, } from \"@tsparticles/engine\";\nimport { Tilt } from \"./Options/Classes/Tilt.js\";\nimport { TiltDirection } from \"./TiltDirection.js\";\nconst identity = 1, double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: degToRad(getRangeValue(tiltOptions.value)),\n            sinDirection: getRandom() >= half ? identity : -identity,\n            cosDirection: getRandom() >= half ? identity : -identity,\n            min: 0,\n            max: doublePI,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === TiltDirection.random) {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            tiltDirection = index > minIndex ? TiltDirection.counterClockwise : TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.tilt.status = AnimationStatus.decreasing;\n                break;\n            case TiltDirection.clockwise:\n                particle.tilt.status = AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = identity - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity =\n                (getRangeValue(tiltAnimation.speed) / maxAngle) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.tilt) {\n            return;\n        }\n        updateAnimation(particle, particle.tilt, false, DestroyType.none, delta);\n        await Promise.resolve();\n    }\n}\n", "import { TiltUpdater } from \"./TiltUpdater.js\";\nexport async function loadTiltUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"tilt\", container => {\n        return Promise.resolve(new TiltUpdater(container));\n    }, refresh);\n}\n", "import { OptionsColor, isNull, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n", "import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(this._engine, twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n", "import { TwinkleUpdater } from \"./TwinkleUpdater.js\";\nexport async function loadTwinkleUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"twinkle\", () => {\n        return Promise.resolve(new TwinkleUpdater(engine));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n", "import { isNull, isNumber, setRangeValue, } from \"@tsparticles/engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed.js\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n", "import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor)) /\n        (millisecondsToSeconds / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n", "import { getRandom, getRangeValue, } from \"@tsparticles/engine\";\nimport { Wobble } from \"./Options/Classes/Wobble.js\";\nimport { updateWobble } from \"./Utils.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * doublePI,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / maxAngle,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / moveSpeedFactor,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance =\n            getRangeValue(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n", "import { WobbleUpdater } from \"./WobbleUpdater.js\";\nexport async function loadWobbleUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"wobble\", container => {\n        return Promise.resolve(new WobbleUpdater(container));\n    }, refresh);\n}\n", "import { loadAbsorbersPlugin } from \"@tsparticles/plugin-absorbers\";\nimport { loadDestroyUpdater } from \"@tsparticles/updater-destroy\";\nimport { loadEmittersPlugin } from \"@tsparticles/plugin-emitters\";\nimport { loadEmittersShapeCircle } from \"@tsparticles/plugin-emitters-shape-circle\";\nimport { loadEmittersShapeSquare } from \"@tsparticles/plugin-emitters-shape-square\";\nimport { loadExternalTrailInteraction } from \"@tsparticles/interaction-external-trail\";\nimport { loadRollUpdater } from \"@tsparticles/updater-roll\";\nimport { loadSlim } from \"@tsparticles/slim\";\nimport { loadTextShape } from \"@tsparticles/shape-text\";\nimport { loadTiltUpdater } from \"@tsparticles/updater-tilt\";\nimport { loadTwinkleUpdater } from \"@tsparticles/updater-twinkle\";\nimport { loadWobbleUpdater } from \"@tsparticles/updater-wobble\";\nexport async function loadFull(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadDestroyUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadTwinkleUpdater(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadTextShape(engine, false);\n    await loadExternalTrailInteraction(engine, false);\n    await loadAbsorbersPlugin(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadEmittersShapeCircle(engine, false);\n    await loadEmittersShapeSquare(engine, false);\n    await loadSlim(engine, refresh);\n}\n"],
  "mappings": "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",
  "names": ["AbsorberClickMode", "double", "container", "DestroyMode", "EmitterClickMode", "half", "minLifeCount", "container", "defaultIndex", "double", "squareExp", "half", "Sides", "RollMode", "double", "doublePI", "maxAngle", "double", "half", "TiltDirection", "double", "doublePI", "maxAngle", "double", "doublePI", "double", "doublePI", "maxAngle", "defaultDistance"]
}
